{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ahxov\\\\render-x\\\\src\\\\components\\\\GameChatbot.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GameChatbot = () => {\n  _s();\n  const [input, setInput] = useState(\"\");\n  const [messages, setMessages] = useState([{\n    text: \"Hey gamer! Ask me anything about PC builds, games, or accessories!\",\n    type: \"bot\"\n  }]);\n  const [isOpen, setIsOpen] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const handleSend = async () => {\n    if (!input.trim()) return;\n    const newMessages = [...messages, {\n      text: input,\n      type: \"user\"\n    }];\n    setMessages(newMessages);\n    setInput(\"\");\n    setLoading(true);\n    try {\n      var _data$candidates, _data$candidates$, _data$candidates$$con, _data$candidates$$con2, _data$candidates$$con3;\n      const response = await fetch(\"https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent?key=AIzaSyCtYcDi5dcDYcIb1Jz3zT6Tymoww6lO4CA\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          contents: [{\n            parts: [{\n              text: \"You're a gaming expert. Only respond to gaming-related questions like PC builds, FPS, GPUs, gaming chairs, keyboards, and specific game settings. \" + input\n            }]\n          }]\n        })\n      });\n      const data = await response.json();\n      const botText = (data === null || data === void 0 ? void 0 : (_data$candidates = data.candidates) === null || _data$candidates === void 0 ? void 0 : (_data$candidates$ = _data$candidates[0]) === null || _data$candidates$ === void 0 ? void 0 : (_data$candidates$$con = _data$candidates$.content) === null || _data$candidates$$con === void 0 ? void 0 : (_data$candidates$$con2 = _data$candidates$$con.parts) === null || _data$candidates$$con2 === void 0 ? void 0 : (_data$candidates$$con3 = _data$candidates$$con2[0]) === null || _data$candidates$$con3 === void 0 ? void 0 : _data$candidates$$con3.text) || \"Sorry, I didnâ€™t quite get that.\";\n      setMessages([...newMessages, {\n        text: botText,\n        type: \"bot\"\n      }]);\n    } catch (error) {\n      setMessages([...newMessages, {\n        text: \"Something went wrong. Try again later.\",\n        type: \"bot\"\n      }]);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const handleKeyPress = e => {\n    if (e.key === \"Enter\") handleSend();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"fixed bottom-4 right-4 z-50\",\n    children: [isOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"w-80 h-[450px] bg-[#0f0f0f] text-white rounded-lg shadow-2xl flex flex-col overflow-hidden\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-emerald-600 p-3 text-center font-bold\",\n        children: \"\\uD83C\\uDFAE Gemini Gaming Bot\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex-1 p-3 overflow-y-auto space-y-2 custom-scrollbar\",\n        children: [messages.map((msg, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `text-sm p-2 rounded-lg ${msg.type === \"user\" ? \"bg-emerald-700 text-right\" : \"bg-gray-800\"}`,\n          children: msg.text\n        }, idx, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 15\n        }, this)), loading && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-sm text-gray-400\",\n          children: \"Typing...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"p-2 border-t border-gray-700 flex\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          className: \"flex-1 p-2 text-black rounded-l text-sm\",\n          placeholder: \"Ask about games or PC builds...\",\n          value: input,\n          onChange: e => setInput(e.target.value),\n          onKeyPress: handleKeyPress\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleSend,\n          className: \"bg-emerald-600 px-4 text-white rounded-r hover:bg-emerald-700\",\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setIsOpen(!isOpen),\n      className: \"bg-emerald-600 hover:bg-emerald-700 text-white rounded-full p-4 shadow-lg\",\n      children: isOpen ? \"âœ–\" : \"ðŸ’¬\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n};\n_s(GameChatbot, \"G9uD0CxE+/VPlgMLVwE8RDMLK8Y=\");\n_c = GameChatbot;\nexport default GameChatbot;\nvar _c;\n$RefreshReg$(_c, \"GameChatbot\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","GameChatbot","_s","input","setInput","messages","setMessages","text","type","isOpen","setIsOpen","loading","setLoading","handleSend","trim","newMessages","_data$candidates","_data$candidates$","_data$candidates$$con","_data$candidates$$con2","_data$candidates$$con3","response","fetch","method","headers","body","JSON","stringify","contents","parts","data","json","botText","candidates","content","error","handleKeyPress","e","key","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","msg","idx","placeholder","value","onChange","target","onKeyPress","onClick","_c","$RefreshReg$"],"sources":["C:/Users/ahxov/render-x/src/components/GameChatbot.js"],"sourcesContent":["import React, { useState } from \"react\";\r\n\r\nconst GameChatbot = () => {\r\n  const [input, setInput] = useState(\"\");\r\n  const [messages, setMessages] = useState([\r\n    {\r\n      text: \"Hey gamer! Ask me anything about PC builds, games, or accessories!\",\r\n      type: \"bot\",\r\n    },\r\n  ]);\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const handleSend = async () => {\r\n    if (!input.trim()) return;\r\n    const newMessages = [...messages, { text: input, type: \"user\" }];\r\n    setMessages(newMessages);\r\n    setInput(\"\");\r\n    setLoading(true);\r\n\r\n    try {\r\n      const response = await fetch(\r\n        \"https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent?key=AIzaSyCtYcDi5dcDYcIb1Jz3zT6Tymoww6lO4CA\",\r\n        {\r\n          method: \"POST\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n          },\r\n          body: JSON.stringify({\r\n            contents: [\r\n              {\r\n                parts: [\r\n                  {\r\n                    text:\r\n                      \"You're a gaming expert. Only respond to gaming-related questions like PC builds, FPS, GPUs, gaming chairs, keyboards, and specific game settings. \" +\r\n                      input,\r\n                  },\r\n                ],\r\n              },\r\n            ],\r\n          }),\r\n        }\r\n      );\r\n\r\n      const data = await response.json();\r\n      const botText =\r\n        data?.candidates?.[0]?.content?.parts?.[0]?.text ||\r\n        \"Sorry, I didnâ€™t quite get that.\";\r\n      setMessages([...newMessages, { text: botText, type: \"bot\" }]);\r\n    } catch (error) {\r\n      setMessages([\r\n        ...newMessages,\r\n        { text: \"Something went wrong. Try again later.\", type: \"bot\" },\r\n      ]);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleKeyPress = (e) => {\r\n    if (e.key === \"Enter\") handleSend();\r\n  };\r\n\r\n  return (\r\n    <div className=\"fixed bottom-4 right-4 z-50\">\r\n      {isOpen && (\r\n        <div className=\"w-80 h-[450px] bg-[#0f0f0f] text-white rounded-lg shadow-2xl flex flex-col overflow-hidden\">\r\n          <div className=\"bg-emerald-600 p-3 text-center font-bold\">\r\n            ðŸŽ® Gemini Gaming Bot\r\n          </div>\r\n          <div className=\"flex-1 p-3 overflow-y-auto space-y-2 custom-scrollbar\">\r\n            {messages.map((msg, idx) => (\r\n              <div\r\n                key={idx}\r\n                className={`text-sm p-2 rounded-lg ${\r\n                  msg.type === \"user\"\r\n                    ? \"bg-emerald-700 text-right\"\r\n                    : \"bg-gray-800\"\r\n                }`}\r\n              >\r\n                {msg.text}\r\n              </div>\r\n            ))}\r\n            {loading && <div className=\"text-sm text-gray-400\">Typing...</div>}\r\n          </div>\r\n          <div className=\"p-2 border-t border-gray-700 flex\">\r\n            <input\r\n              type=\"text\"\r\n              className=\"flex-1 p-2 text-black rounded-l text-sm\"\r\n              placeholder=\"Ask about games or PC builds...\"\r\n              value={input}\r\n              onChange={(e) => setInput(e.target.value)}\r\n              onKeyPress={handleKeyPress}\r\n            />\r\n            <button\r\n              onClick={handleSend}\r\n              className=\"bg-emerald-600 px-4 text-white rounded-r hover:bg-emerald-700\"\r\n            >\r\n              Send\r\n            </button>\r\n          </div>\r\n        </div>\r\n      )}\r\n      <button\r\n        onClick={() => setIsOpen(!isOpen)}\r\n        className=\"bg-emerald-600 hover:bg-emerald-700 text-white rounded-full p-4 shadow-lg\"\r\n      >\r\n        {isOpen ? \"âœ–\" : \"ðŸ’¬\"}\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GameChatbot;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}