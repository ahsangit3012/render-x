{"ast":null,"code":"const CLIENT_ID = \"328701998111-tmisd20ksfna4driqc6u2kj597j7cp0s.apps.googleusercontent.com\";\nconst SCOPES = \"https://www.googleapis.com/auth/calendar.events\";\nlet accessToken = \"\";\nexport const initializeGapi = () => {\n  if (!window.google || !window.google.accounts || !window.google.accounts.oauth2) {\n    console.error(\"Google Identity Services not loaded\");\n  }\n};\nexport const signInWithGoogle = () => {\n  return new Promise((resolve, reject) => {\n    const tokenClient = window.google.accounts.oauth2.initTokenClient({\n      client_id: CLIENT_ID,\n      scope: SCOPES,\n      callback: tokenResponse => {\n        if (tokenResponse.access_token) {\n          accessToken = tokenResponse.access_token;\n          resolve();\n        } else {\n          reject(\"Token error\");\n        }\n      }\n    });\n    tokenClient.requestAccessToken();\n  });\n};\nexport const createCalendarEvent = async (summary, description, start, end) => {\n  const event = {\n    summary,\n    description,\n    start: {\n      dateTime: start,\n      timeZone: \"Asia/Dubai\"\n    },\n    end: {\n      dateTime: end,\n      timeZone: \"Asia/Dubai\"\n    }\n  };\n  const response = await fetch(\"https://www.googleapis.com/calendar/v3/calendars/primary/events\", {\n    method: \"POST\",\n    headers: {\n      Authorization: `Bearer ${accessToken}`,\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(event)\n  });\n  if (!response.ok) {\n    throw new Error(\"Failed to create calendar event\");\n  }\n  const result = await response.json();\n  console.log(\"Calendar Event Created:\", result);\n  return result;\n};","map":{"version":3,"names":["CLIENT_ID","SCOPES","accessToken","initializeGapi","window","google","accounts","oauth2","console","error","signInWithGoogle","Promise","resolve","reject","tokenClient","initTokenClient","client_id","scope","callback","tokenResponse","access_token","requestAccessToken","createCalendarEvent","summary","description","start","end","event","dateTime","timeZone","response","fetch","method","headers","Authorization","body","JSON","stringify","ok","Error","result","json","log"],"sources":["C:/Users/ahxov/render-x/src/utils/googleCalendar.js"],"sourcesContent":["const CLIENT_ID =\r\n  \"328701998111-tmisd20ksfna4driqc6u2kj597j7cp0s.apps.googleusercontent.com\";\r\nconst SCOPES = \"https://www.googleapis.com/auth/calendar.events\";\r\n\r\nlet accessToken = \"\";\r\n\r\nexport const initializeGapi = () => {\r\n  if (\r\n    !window.google ||\r\n    !window.google.accounts ||\r\n    !window.google.accounts.oauth2\r\n  ) {\r\n    console.error(\"Google Identity Services not loaded\");\r\n  }\r\n};\r\n\r\nexport const signInWithGoogle = () => {\r\n  return new Promise((resolve, reject) => {\r\n    const tokenClient = window.google.accounts.oauth2.initTokenClient({\r\n      client_id: CLIENT_ID,\r\n      scope: SCOPES,\r\n      callback: (tokenResponse) => {\r\n        if (tokenResponse.access_token) {\r\n          accessToken = tokenResponse.access_token;\r\n          resolve();\r\n        } else {\r\n          reject(\"Token error\");\r\n        }\r\n      },\r\n    });\r\n\r\n    tokenClient.requestAccessToken();\r\n  });\r\n};\r\n\r\nexport const createCalendarEvent = async (summary, description, start, end) => {\r\n  const event = {\r\n    summary,\r\n    description,\r\n    start: {\r\n      dateTime: start,\r\n      timeZone: \"Asia/Dubai\",\r\n    },\r\n    end: {\r\n      dateTime: end,\r\n      timeZone: \"Asia/Dubai\",\r\n    },\r\n  };\r\n\r\n  const response = await fetch(\r\n    \"https://www.googleapis.com/calendar/v3/calendars/primary/events\",\r\n    {\r\n      method: \"POST\",\r\n      headers: {\r\n        Authorization: `Bearer ${accessToken}`,\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(event),\r\n    }\r\n  );\r\n\r\n  if (!response.ok) {\r\n    throw new Error(\"Failed to create calendar event\");\r\n  }\r\n\r\n  const result = await response.json();\r\n  console.log(\"Calendar Event Created:\", result);\r\n  return result;\r\n};\r\n"],"mappings":"AAAA,MAAMA,SAAS,GACb,0EAA0E;AAC5E,MAAMC,MAAM,GAAG,iDAAiD;AAEhE,IAAIC,WAAW,GAAG,EAAE;AAEpB,OAAO,MAAMC,cAAc,GAAGA,CAAA,KAAM;EAClC,IACE,CAACC,MAAM,CAACC,MAAM,IACd,CAACD,MAAM,CAACC,MAAM,CAACC,QAAQ,IACvB,CAACF,MAAM,CAACC,MAAM,CAACC,QAAQ,CAACC,MAAM,EAC9B;IACAC,OAAO,CAACC,KAAK,CAAC,qCAAqC,CAAC;EACtD;AACF,CAAC;AAED,OAAO,MAAMC,gBAAgB,GAAGA,CAAA,KAAM;EACpC,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;IACtC,MAAMC,WAAW,GAAGV,MAAM,CAACC,MAAM,CAACC,QAAQ,CAACC,MAAM,CAACQ,eAAe,CAAC;MAChEC,SAAS,EAAEhB,SAAS;MACpBiB,KAAK,EAAEhB,MAAM;MACbiB,QAAQ,EAAGC,aAAa,IAAK;QAC3B,IAAIA,aAAa,CAACC,YAAY,EAAE;UAC9BlB,WAAW,GAAGiB,aAAa,CAACC,YAAY;UACxCR,OAAO,CAAC,CAAC;QACX,CAAC,MAAM;UACLC,MAAM,CAAC,aAAa,CAAC;QACvB;MACF;IACF,CAAC,CAAC;IAEFC,WAAW,CAACO,kBAAkB,CAAC,CAAC;EAClC,CAAC,CAAC;AACJ,CAAC;AAED,OAAO,MAAMC,mBAAmB,GAAG,MAAAA,CAAOC,OAAO,EAAEC,WAAW,EAAEC,KAAK,EAAEC,GAAG,KAAK;EAC7E,MAAMC,KAAK,GAAG;IACZJ,OAAO;IACPC,WAAW;IACXC,KAAK,EAAE;MACLG,QAAQ,EAAEH,KAAK;MACfI,QAAQ,EAAE;IACZ,CAAC;IACDH,GAAG,EAAE;MACHE,QAAQ,EAAEF,GAAG;MACbG,QAAQ,EAAE;IACZ;EACF,CAAC;EAED,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAC1B,iEAAiE,EACjE;IACEC,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACPC,aAAa,EAAE,UAAUhC,WAAW,EAAE;MACtC,cAAc,EAAE;IAClB,CAAC;IACDiC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACV,KAAK;EAC5B,CACF,CAAC;EAED,IAAI,CAACG,QAAQ,CAACQ,EAAE,EAAE;IAChB,MAAM,IAAIC,KAAK,CAAC,iCAAiC,CAAC;EACpD;EAEA,MAAMC,MAAM,GAAG,MAAMV,QAAQ,CAACW,IAAI,CAAC,CAAC;EACpCjC,OAAO,CAACkC,GAAG,CAAC,yBAAyB,EAAEF,MAAM,CAAC;EAC9C,OAAOA,MAAM;AACf,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}